Delve
Debugging Go Programs

Derek Parker
http://www.derkthedaring.com
@DerkTheDaring

* Who am I?

.image images/hr_logo.png
.caption @DerkTheDaring
.caption Software Engineer @Hashrocket

* What is Delve?

* Delve is a Go centric debugger

Delve was created for the sole purpose of debugging Go programs.

The main goals of Delve are:

- Handle the Go concurrency model
- Extreme ease of use
- One step debugging (launch and debug)

* Simplicity

You're already in a bad mood because your software isn't working. Delve should be easy and painless to use.

To facilitate the second point, Delve provides the following:

- An extremely simple command line interface
- A small set of intuitive commands (break, step, next, continue, threads, goroutines, etc..)
- No intermediate steps, simply invoke Delve and begin debugging

* Installation

* Linux

	go get -u github.com/derekparker/delve/cmd/dlv

You're done!

* OS X

	go get -u github.com/derekparker/delve/cmd/dlv

Now, create a self signed root cert and codesign Delve.

Details of how to do that are in the project README.

* Usage

* Starting Delve

Delve can be invoked with the following simple, one step commands:

- dlv run - Compiles, runs and attaches to your program
- dlv test - Compiles, runs, and attaches to test binary
- dlv attach - Attach to existing process by pid
- dlv ./path/to/prog - Launch existing compiled binary and attach

* Debugging commands

- break - Set a breakpoint at function or file:line
- print - Evaluate a variable
- continue - Continue program execution
- step - single step one instruction
- next - step to next source line
- info (funcs, sources, args, locals) - Display info on funcs / source files in program, print all local vars, print args
- threads - List all threads and their current positions
- goroutines - List all goroutines

* Why build a debugger?

* Existing tools do not suffice

- GDB expects a more traditional model of parallel execution
- Trips over goroutine thread switching
- Can prevent scheduler from performing its job
- No knowledge of Go runtime scheduler
- No knowledge of Go types

* Ease of use

Delve was built to work as simply as the existing Go toolchain

- Go toolchain is wonderfully simple to use
	`go get`, `go build`, `go install`, `go test`
- Delve was build with command line simplicity in mind
	`dlv run`, `dlv test`, `dlv attach`

* It sounded fun!

.image images/gopher.png
.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]

Look at how happy that Gopher is!

I wanted to hack on something fun and challenging.

* Let's delve further in...

* Handling the Runtime Scheduler

* What does it do?

- Manages OS threads
- Handles multiplexing of goroutines
- Ensures threads are always executing runnable goroutines
- Is invoked for certain operations (blocking syscalls, chan ops, etc..)

* How does Delve handle it?

- Allow scheduler to do its job
- Properly handle threads waiting for runnable goroutines
- _Expect_ goroutine thread switching

* DO LIVE EXAMPLES!

.image images/gopherswrench.jpg _ 600
.caption _Gophers_ _Wrench_ by [[http://www.reneefrench.com][Renée French]]

* Roadmap to 1.0

* Delve is beta

Delve has come a long way, but there is more to be done.

* Planned features

- Improved variable evaluation
- Allow user to set variables
- Manually switch threads / goroutines
- Improve goroutine tracking
- IDE / editor integration (in the works)
- More...

* Hack on it!

I really appreciate the excitement from the Go community.

I welcome contributors! Feel free to hack on it and send in a pull request.
